ЁЯУШ ReactJS Documentation Notes
1. ReactJS Introduction

ReactJS рж╣рж▓рзЛ Facebook (Meta) ржжрзНржмрж╛рж░рж╛ рждрзИрж░рж┐ ржХрж░рж╛ ржПржХржЯрж┐ JavaScript рж▓рж╛ржЗржмрзНрж░рзЗрж░рж┐ред

ржорзВрж▓ ржХрж╛ржЬ тЖТ UI (User Interface) ржмрж╛ржирж╛ржирзЛред

ржмрзИрж╢рж┐рж╖рзНржЯрзНржп:

Component Based Architecture

Declarative (UI ржХрзЗржоржи рж╣ржмрзЗ рж╕рзЗржЯрж╛ ржмрж▓рзЗ ржжрж╛ржУ, React рж╕рзЗржЯрж╛ ржмрж╛ржирж╛рзЯ)

Virtual DOM ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ fast rendering

Reusable Components

2. Core Concepts
a) Components

Components = ржЫрзЛржЯ ржЫрзЛржЯ reusable UI ржЕржВрж╢ред

ржжрзБржЗ ржзрж░ржирзЗрж░ Component:

Functional Component (modern, hooks ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ)

Class Component (ржкрзБрж░ржирзЛ style, ржПржЦржи ржХржо ржмрзНржпржмрж╣рж╛рж░ рж╣рзЯ)

b) JSX (JavaScript XML)

JavaScript + HTML ржорж┐рж╢рзНрж░ syntaxред

Example:

const element = <h1>Hello React!</h1>;

c) Props

Props = Properties

Component ржП data ржкрж╛ржарж╛ржирзЛрж░ ржЙржкрж╛рзЯред

Example:

function Welcome(props) {
  return <h1>Hello, {props.name}</h1>;
}

d) State

Component ржПрж░ ржнрзЗрждрж░рзЗрж░ data ржпрзЗржЯрж╛ ржкрж░рж┐ржмрж░рзНрждржи рж╣рждрзЗ ржкрж╛рж░рзЗред

Functional Component ржП тЖТ useState hook ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣рзЯред

import { useState } from "react";

function Counter() {
  const [count, setCount] = useState(0);

  return (
    <div>
      <p>{count}</p>
      <button onClick={() => setCount(count + 1)}>Increase</button>
    </div>
  );
}

e) Events

React ржП events camelCase рж╣рзЯ: onClick, onChange ржЗрждрзНржпрж╛ржжрж┐ред

<button onClick={handleClick}>Click Me</button>

3. React Hooks
a) useState

State ржорзНржпрж╛ржирзЗржЬ ржХрж░рж╛рж░ ржЬржирзНржпред

b) useEffect

Side effects (API call, timer, DOM update) ржХрж░рж╛рж░ ржЬржирзНржпред

c) useContext

Props drilling ржЫрж╛рзЬрж╛ржЗ data рж╢рзЗрзЯрж╛рж░ ржХрж░рж╛рж░ ржЬржирзНржпред

d) useRef

DOM element ржмрж╛ mutable value ржзрж░рж╛рж░ ржЬржирзНржпред

e) useReducer

Complex state management ржПрж░ ржЬржирзНржпред

4. React Lifecycle (Class Component ржП ржмрзЗрж╢рж┐ ржмрзНржпржмрж╣рзГржд)

Mounting тЖТ componentDidMount

Updating тЖТ componentDidUpdate

Unmounting тЖТ componentWillUnmount

(Functional components ржП ржПржЧрзБрж▓рзЛ useEffect ржжрж┐рзЯрзЗ handle ржХрж░рж╛ рж╣рзЯ)

5. React Router

Single Page Application (SPA) ржмрж╛ржирж╛рждрзЗ ржмрзНржпржмрж╣рзГрждред

ржкрзЗржЬ ржкрж░рж┐ржмрж░рзНрждржи ржирж╛ ржХрж░рзЗ URL ржкрж░рж┐ржмрж░рзНрждржи рж╣рзЯред

Example:

import { BrowserRouter, Routes, Route, Link } from "react-router-dom";

function App() {
  return (
    <BrowserRouter>
      <nav>
        <Link to="/">Home</Link>
        <Link to="/about">About</Link>
      </nav>
      <Routes>
        <Route path="/" element={<Home />} />
        <Route path="/about" element={<About />} />
      </Routes>
    </BrowserRouter>
  );
}

6. React with API

Fetch API ржмрж╛ Axios ржжрж┐рзЯрзЗ ржбрзЗржЯрж╛ ржЖржирж╛ рж╣рзЯред

рж╕рж╛ржзрж╛рж░ржгржд useEffect ржПрж░ ржнрзЗрждрж░ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣рзЯред

import { useEffect, useState } from "react";

function Users() {
  const [users, setUsers] = useState([]);

  useEffect(() => {
    fetch("https://jsonplaceholder.typicode.com/users")
      .then(res => res.json())
      .then(data => setUsers(data));
  }, []);

  return (
    <ul>
      {users.map(user => <li key={user.id}>{user.name}</li>)}
    </ul>
  );
}

7. Advanced Topics

Context API тЖТ global state managementред

Redux / Zustand / Recoil тЖТ ржмрзЬ ржкрзНрж░рзЛржЬрзЗржХрзНржЯрзЗ state managementред

React Query / SWR тЖТ API data cache + syncред

Custom Hooks тЖТ ржирж┐ржЬрзЗрж░ hook ржмрж╛ржирж┐рзЯрзЗ reuse ржХрж░рж╛ ржпрж╛рзЯред

8. React Best Practices

тЬЕ Components ржЫрзЛржЯ рж░рж╛ржЦрж╛
тЬЕ Meaningful ржирж╛ржо ржжрзЗржУрзЯрж╛
тЬЕ Reusable component ржмрж╛ржирж╛ржирзЛ
тЬЕ Folder structure ржарж┐ржХ рж░рж╛ржЦрж╛
тЬЕ PropTypes / TypeScript ржжрж┐рзЯрзЗ type-checking

9. React Project Structure (Basic)
my-app/
  тФЬтФАтФА public/
  тФЬтФАтФА src/
  тФВ   тФЬтФАтФА components/
  тФВ   тФВ   тФФтФАтФА Navbar.jsx
  тФВ   тФЬтФАтФА pages/
  тФВ   тФВ   тФФтФАтФА Home.jsx
  тФВ   тФЬтФАтФА App.jsx
  тФВ   тФЬтФАтФА index.jsx
  тФВ   тФФтФАтФА styles/
  тФВ       тФФтФАтФА App.css
  тФЬтФАтФА package.json
ЁЯУШ ReactJS Notes (Continuation from Previous)
6. React Router (Routing in React)
ЁЯФ╣ ржХрзЗржи ржжрж░ржХрж╛рж░?

React рж╣рж▓рзЛ Single Page Application (SPA) тЖТ ржорж╛ржирзЗ ржкрзБрж░рзЛ рж╕рж╛ржЗржЯ ржПржХржЯрж╛ HTML ржлрж╛ржЗрж▓ ржжрж┐рзЯрзЗ рж▓рзЛржб рж╣рзЯред

ржЖрж▓рж╛ржжрж╛ ржЖрж▓рж╛ржжрж╛ ржкрзЗржЬ рж▓рзЛржб рж╣рзЯ ржирж╛, рж╢рзБржзрзБ component ржкрж░рж┐ржмрж░рзНрждржи рж╣рзЯред

Navigation ржПрж░ ржЬржирзНржп react-router-dom ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣рзЯред

ЁЯФ╣ Installation
npm install react-router-dom

ЁЯФ╣ Basic Example
import { BrowserRouter, Routes, Route, Link } from "react-router-dom";
import Home from "./pages/Home";
import About from "./pages/About";

function App() {
  return (
    <BrowserRouter>
      <nav>
        <Link to="/">Home</Link> | 
        <Link to="/about">About</Link>
      </nav>

      <Routes>
        <Route path="/" element={<Home />} />
        <Route path="/about" element={<About />} />
      </Routes>
    </BrowserRouter>
  );
}

ЁЯФ╣ Important Components

BrowserRouter тЖТ Routing ржПрж░ main wrapperред

Routes тЖТ рж╕ржм route define ржХрж░рж╛ рж╣рзЯ ржПржЦрж╛ржирзЗред

Route тЖТ ржкрзНрж░рждрж┐ржЯрж┐ path ржУ рждрж╛рж░ рж╕рж╛ржерзЗ ржХрзЛржи component render рж╣ржмрзЗ рж╕рзЗржЯрж╛ ржмрж▓рзЗред

Link тЖТ рж╕рж╛ржзрж╛рж░ржг anchor ржЯрзНржпрж╛ржЧрзЗрж░ ржорждрзЛ, ржХрж┐ржирзНрждрзБ page reload ржирж╛ ржХрж░рзЗ navigate ржХрж░рзЗред

useParams() тЖТ Dynamic route parameter ржирж┐рждрзЗ ржмрзНржпржмрж╣рзГржд рж╣рзЯред

useNavigate() тЖТ Programmatically route change ржХрж░рж╛ ржпрж╛рзЯред

ЁЯФ╣ Dynamic Route Example
<Route path="/user/:id" element={<User />} />

function User() {
  let { id } = useParams();
  return <h1>User ID: {id}</h1>;
}

7. React Forms
ЁЯФ╣ Controlled Components

Form input element ржЧрзБрж▓рзЛ React state ржжрзНржмрж╛рж░рж╛ control ржХрж░рж╛ рж╣рзЯред

import { useState } from "react";

function MyForm() {
  const [name, setName] = useState("");

  const handleSubmit = (e) => {
    e.preventDefault();
    alert(`Hello ${name}`);
  };

  return (
    <form onSubmit={handleSubmit}>
      <input 
        type="text" 
        value={name} 
        onChange={(e) => setName(e.target.value)} 
      />
      <button type="submit">Submit</button>
    </form>
  );
}

ЁЯФ╣ Uncontrolled Components

React state ржПрж░ ржмржжрж▓рзЗ ref ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣рзЯред

import { useRef } from "react";

function MyForm() {
  const inputRef = useRef();

  const handleSubmit = (e) => {
    e.preventDefault();
    alert(`Hello ${inputRef.current.value}`);
  };

  return (
    <form onSubmit={handleSubmit}>
      <input type="text" ref={inputRef} />
      <button type="submit">Submit</button>
    </form>
  );
}

8. React with API (Data Fetching)
ЁЯФ╣ Using Fetch API
import { useEffect, useState } from "react";

function Users() {
  const [users, setUsers] = useState([]);

  useEffect(() => {
    fetch("https://jsonplaceholder.typicode.com/users")
      .then(res => res.json())
      .then(data => setUsers(data));
  }, []);

  return (
    <ul>
      {users.map(u => <li key={u.id}>{u.name}</li>)}
    </ul>
  );
}

ЁЯФ╣ Using Axios
npm install axios

import { useEffect, useState } from "react";
import axios from "axios";

function Users() {
  const [users, setUsers] = useState([]);

  useEffect(() => {
    axios.get("https://jsonplaceholder.typicode.com/users")
         .then(res => setUsers(res.data));
  }, []);

  return (
    <ul>
      {users.map(u => <li key={u.id}>{u.name}</li>)}
    </ul>
  );
}

9. Context API (State Sharing Without Props)
ЁЯФ╣ Problem: Props Drilling

ржпржЦржи parent тЖТ child тЖТ grandchild ржПрж░ ржоржзрзНржпрзЗ ржЕржирзЗржХ data ржкрж╛ржарж╛рждрзЗ рж╣рзЯ, рждржЦржи props drilling ржЭрж╛ржорзЗрж▓рж╛ рж╣рзЯред

Context API ржжрж┐рзЯрзЗ global state рж╢рзЗрзЯрж╛рж░ ржХрж░рж╛ ржпрж╛рзЯред

ЁЯФ╣ Example:
import { createContext, useContext, useState } from "react";

const UserContext = createContext();

function App() {
  const [user, setUser] = useState("Rafia");
  return (
    <UserContext.Provider value={user}>
      <Navbar />
    </UserContext.Provider>
  );
}

function Navbar() {
  return <Profile />;
}

function Profile() {
  const user = useContext(UserContext);
  return <h1>Hello, {user}</h1>;
}

10. State Management with Redux
ЁЯФ╣ ржХрзЗржи ржжрж░ржХрж╛рж░?

ржпржЦржи ржЕрзНржпрж╛ржк ржмрзЬ рж╣рзЯ, рждржЦржи рж╢рзБржзрзБ props/state ржжрж┐рзЯрзЗ manage ржХрж░рж╛ ржХржарж┐ржи рж╣рзЯрзЗ ржпрж╛рзЯред

Redux ржПржХржЯрж┐ centralized store ржжрзЗрзЯ ржпрзЗржЦрж╛ржирзЗ рж╕ржм state рж░рж╛ржЦрж╛ рж╣рзЯред

ЁЯФ╣ Install
npm install redux react-redux

ЁЯФ╣ Basic Flow

Store тЖТ Central place for stateред

Action тЖТ ржХрзА ржХрж░рждрзЗ рж╣ржмрзЗ рж╕рзЗржЯрж╛ ржмрж▓рзЗред

Reducer тЖТ State ржХрж┐ржнрж╛ржмрзЗ update рж╣ржмрзЗ рж╕рзЗржЯрж╛ ржмрж▓рзЗред

Dispatch тЖТ Action ржкрж╛ржарж╛ржирзЛ рж╣рзЯред

11. Performance Optimization
Techniques:

React.memo() тЖТ Component memoize ржХрж░рзЗ, props ржирж╛ ржмржжрж▓рж╛рж▓рзЗ re-render рж╣рзЯ ржирж╛ред

useMemo() тЖТ Expensive calculation memoize ржХрж░рзЗред

useCallback() тЖТ Function re-render рж╣ржУрзЯрж╛ ржмржирзНржз ржХрж░рзЗред

Lazy Loading тЖТ Code-splitting ржПрж░ ржорж╛ржзрзНржпржорзЗ performance improve рж╣рзЯред

import React, { memo } from "react";

const Child = memo(({ name }) => {
  console.log("Rendered");
  return <h1>{name}</h1>;
});

12. Best Practices

тЬЕ Components ржЫрзЛржЯ рж░рж╛ржЦрж╛
тЬЕ Meaningful ржирж╛ржо ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛
тЬЕ Folder structure ржарж┐ржХ рж░рж╛ржЦрж╛
тЬЕ Reusable code рж▓рзЗржЦрж╛
тЬЕ PropTypes ржмрж╛ TypeScript ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛
тЬЕ Unnecessary re-render ржПрзЬрж╛ржирзЛ
ЁЯУШ ReactJS Notes (Continuation)
13. React Testing

React ржЕрзНржпрж╛ржкрзНрж▓рж┐ржХрзЗрж╢ржи ржЯрзЗрж╕рзНржЯ ржХрж░рж╛рж░ ржЬржирзНржп рж╕ржмржЪрзЗрзЯрзЗ ржмрзЗрж╢рж┐ ржмрзНржпржмрж╣рж╛рж░ рж╣рзЯ:

Jest (JavaScript testing framework)

React Testing Library (RTL) (DOM ржЯрзЗрж╕рзНржЯрж┐ржВ ржПрж░ ржЬржирзНржп)

ЁЯФ╣ ржХрзЗржи ржЯрзЗрж╕рзНржЯ ржжрж░ржХрж╛рж░?

ржХрзЛржбрзЗ bug ржЖржЧрзЗ ржерзЗржХрзЗ ржзрж░рждрзЗред

Component ржарж┐ржХ ржорждрзЛ ржХрж╛ржЬ ржХрж░ржЫрзЗ ржХрж┐ржирж╛ verify ржХрж░рждрзЗред

Future changes ржП ржХрзЛржб ржнрзЗржЩрзЗ ржпрж╛ржЪрзНржЫрзЗ ржХрж┐ржирж╛ ржЪрзЗржХ ржХрж░рждрзЗред

ЁЯФ╣ Setup (Jest + RTL)

ржпржжрж┐ рждрзБржорж┐ Create React App (CRA) ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЛ тЖТ Jest & RTL by default ржЗ ржЖрж╕рзЗред
Vite ржкрзНрж░рзЛржЬрзЗржХрзНржЯ рж╣рж▓рзЗ тЖТ ржЖрж▓рж╛ржжрж╛ ржХрж░рзЗ ржЗржирзНрж╕ржЯрж▓ ржХрж░рждрзЗ рж╣рзЯред

npm install --save-dev jest @testing-library/react @testing-library/jest-dom

ЁЯФ╣ Basic Test Example

Component:

function Greeting({ name }) {
  return <h1>Hello, {name}</h1>;
}

export default Greeting;


Test File (Greeting.test.js):

import { render, screen } from "@testing-library/react";
import Greeting from "./Greeting";

test("renders greeting message", () => {
  render(<Greeting name="Rafia" />);
  const element = screen.getByText(/Hello, Rafia/i);
  expect(element).toBeInTheDocument();
});

ЁЯФ╣ User Events Testing
import { render, screen, fireEvent } from "@testing-library/react";
import { useState } from "react";

function Counter() {
  const [count, setCount] = useState(0);
  return (
    <>
      <p>{count}</p>
      <button onClick={() => setCount(count + 1)}>Increment</button>
    </>
  );
}

test("increments count", () => {
  render(<Counter />);
  const button = screen.getByText(/Increment/i);
  fireEvent.click(button);
  expect(screen.getByText("1")).toBeInTheDocument();
});

14. React Deployment

React ржЕрзНржпрж╛ржк рждрзИрж░рж┐ ржХрж░рж╛рж░ ржкрж░ рж╕рзЗржЯрж╛ржХрзЗ Build ржХрж░рзЗ server ржП host ржХрж░рждрзЗ рж╣рзЯред

ЁЯФ╣ Step 1: Production Build рждрзИрж░рж┐ ржХрж░рж╛
npm run build


ЁЯСЙ build/ ржлрзЛрж▓рзНржбрж╛рж░ рждрзИрж░рж┐ рж╣ржмрзЗ, ржПрждрзЗ optimized static files ржерж╛ржХржмрзЗред

ЁЯФ╣ Step 2: Deployment Options
a) Netlify (Easy & Free)

Netlify ржП ржЧрж┐рзЯрзЗ New Site from Git ржП ржХрзНрж▓рж┐ржХ ржХрж░рзЛред

GitHub рж░рж┐ржкрзЛржЬрж┐ржЯрж░рж┐ ржХрж╛ржирзЗржХрзНржЯ ржХрж░рзЛред

Build command: npm run build

Publish directory: build

b) Vercel (Fast, Popular)

Vercel ржП ржЧрж┐рзЯрзЗ New Project ржП ржХрзНрж▓рж┐ржХ ржХрж░рзЛред

GitHub рж░рж┐ржкрзЛржЬрж┐ржЯрж░рж┐ ржХрж╛ржирзЗржХрзНржЯ ржХрж░рзЛред

Framework detect рж╣рзЯрзЗ ржпрж╛ржмрзЗред

Deploy ржХрзНрж▓рж┐ржХ ржХрж░рж▓рзЗржЗ рж▓рж╛ржЗржн рж╣рзЯрзЗ ржпрж╛ржмрзЗред

c) GitHub Pages

ржкрзНржпрж╛ржХрзЗржЬ ржЗржирж╕рзНржЯрж▓ ржХрж░рзЛ:

npm install gh-pages --save-dev


package.json ржП ржпрзЛржЧ ржХрж░рзЛ:

"homepage": "https://username.github.io/repo-name",
"scripts": {
  "predeploy": "npm run build",
  "deploy": "gh-pages -d build"
}


Run:

npm run deploy

d) Custom Hosting (cPanel, VPS, Firebase, AWS, etc.)

Build folder ржХрзЗ hosting server ржП upload ржХрж░рждрзЗ рж╣рзЯред

Example: Firebase

npm install -g firebase-tools
firebase login
firebase init
firebase deploy

ЁЯФ╣ Deployment Checklist

тЬЕ npm run build ржжрж┐рзЯрзЗ production build рждрзИрж░рж┐ ржХрж░рждрзЗ рж╣ржмрзЗред
тЬЕ .env ржлрж╛ржЗрж▓рзЗ environment variable ржЧрзБрж▓рзЛ production-ready ржХрж┐ржирж╛ ржЪрзЗржХ ржХрж░рждрзЗ рж╣ржмрзЗред
тЬЕ API endpoint ржЧрзБрж▓рзЛ рж╕ржарж┐ржХ server ржПрж░ рж╕рж╛ржерзЗ ржпрзБржХрзНржд ржЖржЫрзЗ ржХрж┐ржирж╛ ржжрзЗржЦрждрзЗ рж╣ржмрзЗред

15. React Interview Preparation (Quick Topics)

React vs Angular vs Vue

Virtual DOM ржХрзА?

Props vs State

useEffect vs useLayoutEffect

Controlled vs Uncontrolled Components

Context API vs Redux

React performance optimization techniques

React lifecycle methods
7. React Hooks

React v16.8 ржП Hooks ржПрж╕рзЗржЫрзЗред ржПржЧрзБрж▓рзЛ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржЖржорж░рж╛ state ржУ lifecycle features ржлрж╛ржВрж╢ржирж╛рж▓ ржХржорзНржкрзЛржирзЗржирзНржЯрзЗ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ ржкрж╛рж░рж┐ (ржЖржЧрзЗ рж╢рзБржзрзБ class component-ржП рж╕ржорзНржнржм ржЫрж┐рж▓)ред

7.1 useState

Function component-ржП state ржорзНржпрж╛ржирзЗржЬ ржХрж░рж╛рж░ ржЬржирзНржп ржмрзНржпржмрж╣рж╛рж░ рж╣рзЯред

Syntax:

import { useState } from "react";

function Counter() {
  const [count, setCount] = useState(0);

  return (
    <div>
      <p>Count: {count}</p>
      <button onClick={() => setCount(count + 1)}>Increment</button>
    </div>
  );
}


ржПржЦрж╛ржирзЗ count рж╣ржЪрзНржЫрзЗ state ржнрзНржпрж╛рж▓рзБ, ржЖрж░ setCount рж╣ржЪрзНржЫрзЗ state ржЖржкржбрзЗржЯ ржХрж░рж╛рж░ ржлрж╛ржВрж╢ржиред

7.2 useEffect

Lifecycle method (componentDidMount, componentDidUpdate, componentWillUnmount) ржПрж░ ржмрж┐ржХрж▓рзНржкред

ржорзВрж▓ржд side effect ржПрж░ ржЬржирзНржп ржмрзНржпржмрж╣рзГржд рж╣рзЯ (ржпрзЗржоржи: API call, event listener, DOM manipulation)ред

Syntax:

import { useState, useEffect } from "react";

function Example() {
  const [data, setData] = useState([]);

  useEffect(() => {
    fetch("https://api.example.com/items")
      .then(res => res.json())
      .then(data => setData(data));
  }, []); // dependency array

  return <ul>{data.map(item => <li key={item.id}>{item.name}</li>)}</ul>;
}


[] ржжрж┐рж▓рзЗ effect рж╢рзБржзрзБ ржПржХржмрж╛рж░ (component mount рж╣рж▓рзЗ) рж░рж╛ржи ржХрж░ржмрзЗред

dependency ржжрж┐рж▓рзЗ ([count]) тАУ count ржкрж░рж┐ржмрж░рзНрждржи рж╣рж▓рзЗржЗ effect рж░рж╛ржи ржХрж░ржмрзЗред

7.3 useContext

Props drilling ржПрзЬрж╛ржирзЛрж░ ржЬржирзНржп ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣рзЯред

Context API ржПрж░ рж╕рж╛ржерзЗ ржорж┐рж▓рзЗ ржХрж╛ржЬ ржХрж░рзЗред

Example:

import { createContext, useContext } from "react";

const UserContext = createContext();

function App() {
  return (
    <UserContext.Provider value="Rafia">
      <Profile />
    </UserContext.Provider>
  );
}

function Profile() {
  const user = useContext(UserContext);
  return <h1>Hello, {user}</h1>;
}

7.4 useRef

DOM element ржмрж╛ mutable value ржЯрзНрж░рзНржпрж╛ржХ ржХрж░рж╛рж░ ржЬржирзНржп ржмрзНржпржмрж╣рзГржд рж╣рзЯред

Example:

import { useRef } from "react";

function TextInput() {
  const inputRef = useRef();

  const focusInput = () => {
    inputRef.current.focus();
  };

  return (
    <div>
      <input ref={inputRef} type="text" />
      <button onClick={focusInput}>Focus</button>
    </div>
  );
}

7.5 useReducer

Complex state ржорзНржпрж╛ржирзЗржЬ ржХрж░рж╛рж░ ржЬржирзНржп ржмрзНржпржмрж╣рж╛рж░ рж╣рзЯ (Redux-ржПрж░ ржорждрзЛ ржХрж╛ржЬ ржХрж░рзЗ)ред

Example:

import { useReducer } from "react";

const initialState = 0;

function reducer(state, action) {
  switch (action.type) {
    case "increment": return state + 1;
    case "decrement": return state - 1;
    default: return state;
  }
}

function Counter() {
  const [count, dispatch] = useReducer(reducer, initialState);

  return (
    <div>
      <p>Count: {count}</p>
      <button onClick={() => dispatch({ type: "increment" })}>+</button>
      <button onClick={() => dispatch({ type: "decrement" })}>-</button>
    </div>
  );
}

7.6 Custom Hooks

Reusable logic ржмрж╛ржирж╛ржирзЛрж░ ржЬржирзНржп ржмрзНржпржмрж╣рж╛рж░ рж╣рзЯред

Example:

import { useState, useEffect } from "react";

function useFetch(url) {
  const [data, setData] = useState(null);

  useEffect(() => {
    fetch(url)
      .then(res => res.json())
      .then(setData);
  }, [url]);

  return data;
}

function App() {
  const users = useFetch("https://api.example.com/users");
  return <div>{JSON.stringify(users)}</div>;
}

